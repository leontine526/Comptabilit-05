
#!/usr/bin/env python
"""
Script de diagnostic pour d√©tecter et analyser les erreurs dans l'application SmartOHADA
"""
import os
import sys
import logging
import importlib
import traceback
import datetime
import json
from collections import defaultdict

# Configuration du logging pour le diagnostic
logging.basicConfig(level=logging.INFO, 
                   format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger("diagnostics")

class ErrorDiagnostics:
    def __init__(self):
        self.error_summary = defaultdict(list)
        self.error_count = 0
        self.warning_count = 0
        self.start_time = datetime.datetime.now()
        self.log_file = "logs/app.log"
        self.issues_found = []
        
        # Cr√©er le dossier de logs s'il n'existe pas
        os.makedirs("logs", exist_ok=True)
        
    def check_environment(self):
        """V√©rifie les variables d'environnement essentielles"""
        logger.info("üîç V√©rification des variables d'environnement...")
        
        # Liste des variables d'environnement critiques
        env_vars = ["DATABASE_URL", "FLASK_ENV", "PORT", "SESSION_SECRET"]
        
        for var in env_vars:
            if var in os.environ:
                # Masquer les informations sensibles dans les logs
                if var == "DATABASE_URL" or var == "SESSION_SECRET":
                    value_preview = os.environ[var][:10] + "..." if os.environ[var] else "Non d√©finie"
                    logger.info(f"‚úÖ {var}: {value_preview}")
                else:
                    logger.info(f"‚úÖ {var}: {os.environ[var]}")
            else:
                logger.warning(f"‚ö†Ô∏è {var} non d√©finie")
                self.warning_count += 1
                self.issues_found.append(f"Variable d'environnement manquante: {var}")
    
    def check_modules(self):
        """V√©rifie si les modules essentiels peuvent √™tre import√©s"""
        logger.info("\nüîç V√©rification des modules Python...")
        
        essential_modules = [
            "flask", "flask_login", "flask_sqlalchemy", "flask_socketio", 
            "sqlalchemy", "dotenv", "werkzeug", "jinja2"
        ]
        
        for module in essential_modules:
            try:
                importlib.import_module(module)
                logger.info(f"‚úÖ Module {module} import√© avec succ√®s")
            except ImportError as e:
                error_msg = f"‚ùå Erreur d'importation du module {module}: {str(e)}"
                logger.error(error_msg)
                self.error_count += 1
                self.error_summary["modules"].append(error_msg)
                self.issues_found.append(f"Module manquant: {module}")
            except Exception as e:
                error_msg = f"‚ùå Erreur inattendue lors de l'importation de {module}: {str(e)}"
                logger.error(error_msg)
                self.error_count += 1
                self.error_summary["modules"].append(error_msg)
    
    def check_key_files(self):
        """V√©rifie la pr√©sence des fichiers cl√©s de l'application"""
        logger.info("\nüîç V√©rification des fichiers essentiels...")
        
        key_files = [
            "app.py", "main.py", "db_helper.py", "error_handlers.py", 
            "error_interceptor.py", "models.py", "routes.py", "wsgi.py",
            "db_initialize.py", "templates/base.html", "templates/errors/500.html"
        ]
        
        for file_path in key_files:
            if os.path.exists(file_path):
                logger.info(f"‚úÖ Fichier {file_path} trouv√©")
            else:
                error_msg = f"‚ùå Fichier {file_path} manquant"
                logger.error(error_msg)
                self.error_count += 1
                self.error_summary["files"].append(error_msg)
                self.issues_found.append(f"Fichier manquant: {file_path}")
    
    def check_logs(self):
        """Analyse les fichiers de logs pour trouver des erreurs r√©centes"""
        logger.info("\nüîç Analyse des logs d'erreur...")
        
        if not os.path.exists(self.log_file):
            logger.warning(f"‚ö†Ô∏è Fichier de log non trouv√©: {self.log_file}")
            self.warning_count += 1
            self.issues_found.append("Fichier de log manquant")
            return
        
        try:
            # R√©cup√©rer les derni√®res erreurs dans le fichier de log
            with open(self.log_file, 'r') as f:
                lines = f.readlines()
                
                # Compter les erreurs des derni√®res 24 heures
                recent_errors = []
                error_types = defaultdict(int)
                today = datetime.datetime.now().date()
                
                for line in lines:
                    if "ERROR" in line:
                        try:
                            # Extraire la date du log (format: 2023-05-26 14:30:45)
                            date_str = line.split(' - ')[0]
                            log_date = datetime.datetime.strptime(date_str, "%Y-%m-%d %H:%M:%S").date()
                            
                            # Si l'erreur est r√©cente (derni√®res 24h)
                            if (today - log_date).days <= 1:
                                recent_errors.append(line.strip())
                                
                                # Classifier le type d'erreur
                                if "ImportError" in line:
                                    error_types["ImportError"] += 1
                                elif "ModuleNotFoundError" in line:
                                    error_types["ModuleNotFoundError"] += 1
                                elif "SQLAlchemyError" in line or "DatabaseError" in line:
                                    error_types["DatabaseError"] += 1
                                elif "TemplateNotFound" in line:
                                    error_types["TemplateNotFound"] += 1
                                elif "KeyError" in line:
                                    error_types["KeyError"] += 1
                                else:
                                    error_types["Other"] += 1
                        except Exception:
                            pass
                
                # Afficher les statistiques d'erreurs
                logger.info(f"üìä {len(recent_errors)} erreurs trouv√©es dans les logs r√©cents")
                
                if error_types:
                    logger.info("Types d'erreurs les plus fr√©quents:")
                    for error_type, count in sorted(error_types.items(), key=lambda x: x[1], reverse=True):
                        logger.info(f"  - {error_type}: {count} occurrences")
                
                # Afficher les 5 derni√®res erreurs
                if recent_errors:
                    logger.info("5 derni√®res erreurs:")
                    for error in recent_errors[-5:]:
                        logger.info(f"  {error}")
                        
                    self.error_summary["logs"] = recent_errors[-10:]  # Garder les 10 derni√®res erreurs
                    self.issues_found.append(f"{len(recent_errors)} erreurs r√©centes dans les logs")
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de l'analyse des logs: {str(e)}")
            logger.error(traceback.format_exc())
            self.error_count += 1
    
    def check_database_connection(self):
        """V√©rifie la connexion √† la base de donn√©es"""
        logger.info("\nüîç V√©rification de la connexion √† la base de donn√©es...")
        
        try:
            # Importer les modules n√©cessaires
            from db_helper import init_db_connection
            
            # Tenter d'√©tablir une connexion
            if init_db_connection():
                logger.info("‚úÖ Connexion √† la base de donn√©es √©tablie avec succ√®s")
            else:
                error_msg = "‚ùå √âchec de la connexion √† la base de donn√©es"
                logger.error(error_msg)
                self.error_count += 1
                self.error_summary["database"].append(error_msg)
                self.issues_found.append("Probl√®me de connexion √† la base de donn√©es")
                
                # Afficher l'URL de la base de donn√©es (masqu√©e)
                db_url = os.environ.get("DATABASE_URL", "Non d√©finie")
                if db_url != "Non d√©finie":
                    # Masquer les informations sensibles
                    masked_url = db_url.split('@')[1] if '@' in db_url else 'Hidden'
                    logger.info(f"URL de la base de donn√©es: ...@{masked_url}")
        except ImportError:
            logger.warning("‚ö†Ô∏è Module db_helper non trouv√©, v√©rification de la BDD ignor√©e")
            self.warning_count += 1
            self.issues_found.append("Module db_helper manquant")
        except Exception as e:
            error_msg = f"‚ùå Erreur lors de la v√©rification de la base de donn√©es: {str(e)}"
            logger.error(error_msg)
            logger.error(traceback.format_exc())
            self.error_count += 1
            self.error_summary["database"].append(error_msg)
            self.issues_found.append("Erreur lors de la connexion √† la BDD")
    
    def check_error_handlers(self):
        """V√©rifie si les gestionnaires d'erreur sont correctement configur√©s"""
        logger.info("\nüîç V√©rification des gestionnaires d'erreur...")
        
        # V√©rifier les importations dans error_interceptor.py
        try:
            with open("error_interceptor.py", "r") as f:
                content = f.read()
                
                # V√©rifier les imports manquants
                missing_imports = []
                required_imports = ["request", "jsonify", "render_template", "logger", "SQLAlchemyError"]
                
                for imp in required_imports:
                    if imp not in content:
                        missing_imports.append(imp)
                
                if missing_imports:
                    error_msg = f"‚ùå Imports manquants dans error_interceptor.py: {', '.join(missing_imports)}"
                    logger.error(error_msg)
                    self.error_count += 1
                    self.error_summary["error_handlers"].append(error_msg)
                    self.issues_found.append("Imports manquants dans error_interceptor.py")
                else:
                    logger.info("‚úÖ Tous les imports n√©cessaires sont pr√©sents dans error_interceptor.py")
                
                # V√©rifier l'initialisation de ErrorInterceptor dans main.py
                try:
                    with open("main.py", "r") as main_file:
                        main_content = main_file.read()
                        if "error_interceptor.initialize()" not in main_content and "error_interceptor.ErrorInterceptor.init_app" not in main_content:
                            error_msg = "‚ùå ErrorInterceptor n'est pas initialis√© dans main.py"
                            logger.error(error_msg)
                            self.error_count += 1
                            self.error_summary["error_handlers"].append(error_msg)
                            self.issues_found.append("ErrorInterceptor non initialis√© dans main.py")
                        else:
                            logger.info("‚úÖ ErrorInterceptor est correctement initialis√© dans main.py")
                except Exception as e:
                    error_msg = f"‚ùå Erreur lors de la v√©rification de main.py: {str(e)}"
                    logger.error(error_msg)
                    self.error_count += 1
                    self.error_summary["error_handlers"].append(error_msg)
        except FileNotFoundError:
            error_msg = "‚ùå Fichier error_interceptor.py non trouv√©"
            logger.error(error_msg)
            self.error_count += 1
            self.error_summary["error_handlers"].append(error_msg)
            self.issues_found.append("Fichier error_interceptor.py manquant")
        except Exception as e:
            error_msg = f"‚ùå Erreur lors de la v√©rification des gestionnaires d'erreur: {str(e)}"
            logger.error(error_msg)
            self.error_count += 1
            self.error_summary["error_handlers"].append(error_msg)
    
    def check_logging_configuration(self):
        """V√©rifie si la configuration du logging est correcte"""
        logger.info("\nüîç V√©rification de la configuration du logging...")
        
        try:
            with open("app.py", "r") as f:
                content = f.read()
                
                # V√©rifier le format de logging
                if "%(message.s" in content:
                    error_msg = "‚ùå Format de logging incorrect dans app.py: %(message.s au lieu de %(message)s"
                    logger.error(error_msg)
                    self.error_count += 1
                    self.error_summary["logging"].append(error_msg)
                    self.issues_found.append("Format de logging incorrect dans app.py")
                else:
                    logger.info("‚úÖ Format de logging correct dans app.py")
                
                # V√©rifier la cr√©ation du dossier de logs
                if "os.makedirs" in content and "logs" in content:
                    logger.info("‚úÖ Cr√©ation du dossier de logs pr√©sente dans app.py")
                else:
                    logger.warning("‚ö†Ô∏è Cr√©ation du dossier de logs potentiellement manquante dans app.py")
                    self.warning_count += 1
        except FileNotFoundError:
            error_msg = "‚ùå Fichier app.py non trouv√©"
            logger.error(error_msg)
            self.error_count += 1
            self.error_summary["logging"].append(error_msg)
            self.issues_found.append("Fichier app.py manquant")
        except Exception as e:
            error_msg = f"‚ùå Erreur lors de la v√©rification de la configuration du logging: {str(e)}"
            logger.error(error_msg)
            self.error_count += 1
            self.error_summary["logging"].append(error_msg)
    
    def generate_report(self):
        """G√©n√®re un rapport d√©taill√© des probl√®mes d√©tect√©s"""
        logger.info("\nüìã G√©n√©ration du rapport de diagnostic...")
        
        end_time = datetime.datetime.now()
        duration = (end_time - self.start_time).total_seconds()
        
        report = {
            "timestamp": datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "duration": f"{duration:.2f} secondes",
            "error_count": self.error_count,
            "warning_count": self.warning_count,
            "issues_found": self.issues_found,
            "detailed_errors": dict(self.error_summary)
        }
        
        # Enregistrer le rapport au format JSON
        report_path = "logs/diagnostic_report.json"
        with open(report_path, "w") as f:
            json.dump(report, f, indent=2)
        
        logger.info(f"Rapport enregistr√© dans {report_path}")
        
        # Afficher un r√©sum√©
        print("\n" + "="*50)
        print(" R√âSUM√â DU DIAGNOSTIC SMARTOHADA ".center(50, "="))
        print("="*50)
        print(f"üïí Date et heure: {report['timestamp']}")
        print(f"‚è±Ô∏è Dur√©e: {report['duration']}")
        print(f"‚ùå Erreurs: {self.error_count}")
        print(f"‚ö†Ô∏è Avertissements: {self.warning_count}")
        print("\nüö® PROBL√àMES D√âTECT√âS:")
        
        if self.issues_found:
            for i, issue in enumerate(self.issues_found, 1):
                print(f"  {i}. {issue}")
        else:
            print("  Aucun probl√®me majeur d√©tect√©!")
        
        print("\nüìù RECOMMANDATIONS:")
        if self.error_count > 0:
            if "ModuleNotFoundError" in str(self.error_summary):
                print("  ‚Ä¢ Installez les modules manquants avec pip install")
            if "DatabaseError" in str(self.error_summary):
                print("  ‚Ä¢ V√©rifiez la connexion √† la base de donn√©es et ses param√®tres")
            if "error_handlers" in self.error_summary:
                print("  ‚Ä¢ Corrigez la configuration des gestionnaires d'erreur")
            if "logging" in self.error_summary:
                print("  ‚Ä¢ Corrigez la configuration du logging dans app.py")
            print("  ‚Ä¢ Consultez le rapport d√©taill√© dans logs/diagnostic_report.json")
        else:
            print("  ‚Ä¢ L'application semble correctement configur√©e!")
            if self.warning_count > 0:
                print("  ‚Ä¢ Quelques avertissements √† surveiller, voir logs/diagnostic_report.json")
        
        print("="*50)
        
        return report
    
    def run_all_checks(self):
        """Ex√©cute tous les tests de diagnostic"""
        print("\n" + "="*50)
        print(" DIAGNOSTIC SMARTOHADA EN COURS ".center(50, "="))
        print("="*50 + "\n")
        
        self.check_environment()
        self.check_modules()
        self.check_key_files()
        self.check_logs()
        self.check_database_connection()
        self.check_error_handlers()
        self.check_logging_configuration()
        
        return self.generate_report()

if __name__ == "__main__":
    try:
        diagnostics = ErrorDiagnostics()
        diagnostics.run_all_checks()
    except KeyboardInterrupt:
        print("\n\nDiagnostic interrompu par l'utilisateur.")
    except Exception as e:
        print(f"\n\nErreur lors de l'ex√©cution du diagnostic: {str(e)}")
        traceback.print_exc()
        sys.exit(1)
