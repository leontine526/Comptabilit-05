
import logging
import sys
import os
import requests
import time
from sqlalchemy import create_engine, text

# Configuration du logging
logging.basicConfig(level=logging.INFO, 
                   format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def check_database():
    """V√©rifier la connexion √† la base de donn√©es"""
    try:
        db_url = os.environ.get("DATABASE_URL", "postgresql://neondb_owner:npg_Crwao4WUkt5f@ep-spring-pond-a5upovj4-pooler.us-east-2.aws.neon.tech/neondb?sslmode=require")
        engine = create_engine(db_url)
        with engine.connect() as conn:
            result = conn.execute(text("SELECT 1"))
            if result.scalar() == 1:
                logger.info("‚úÖ Connexion √† la base de donn√©es r√©ussie")
                return True
        logger.error("‚ùå La requ√™te de test √† la base de donn√©es a √©chou√©")
        return False
    except Exception as e:
        logger.error(f"‚ùå Erreur de connexion √† la base de donn√©es: {str(e)}")
        return False

def check_web_server(url="http://localhost:5000/health"):
    """V√©rifier si le serveur web r√©pond"""
    try:
        response = requests.get(url, timeout=5)
        if response.status_code == 200:
            logger.info(f"‚úÖ Le serveur web r√©pond correctement ({response.status_code})")
            return True
        logger.error(f"‚ùå Le serveur web r√©pond avec un code d'erreur: {response.status_code}")
        return False
    except Exception as e:
        logger.error(f"‚ùå Erreur lors du test du serveur web: {str(e)}")
        return False

def check_static_files():
    """V√©rifier l'acc√®s aux fichiers statiques"""
    try:
        static_url = "http://localhost:5000/static/css/main.css"
        response = requests.get(static_url, timeout=5)
        if response.status_code == 200:
            logger.info("‚úÖ Les fichiers statiques sont accessibles")
            return True
        logger.error(f"‚ùå Erreur d'acc√®s aux fichiers statiques: {response.status_code}")
        return False
    except Exception as e:
        logger.error(f"‚ùå Erreur lors du test des fichiers statiques: {str(e)}")
        return False

def run_health_check():
    """Ex√©cuter tous les contr√¥les de sant√©"""
    logger.info("üîç D√©marrage de la v√©rification de l'√©tat de l'application...")
    
    db_status = check_database()
    web_status = check_web_server()
    static_status = check_static_files()
    
    all_checks_passed = db_status and web_status and static_status
    
    if all_checks_passed:
        logger.info("‚úÖ Tous les contr√¥les sont pass√©s avec succ√®s!")
        return 0
    else:
        logger.error("‚ùå Certains contr√¥les ont √©chou√©. L'application peut ne pas fonctionner correctement.")
        return 1

if __name__ == "__main__":
    sys.exit(run_health_check())
